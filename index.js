"use strict";
var fs = require("fs");
var child_process = require("child_process");
var pathExists = require("path-exists");
var Promise = require("bluebird");
function writefile(file, conf, list) {
    for (var i = 0; i < list.length; i++) {
        conf = conf + "\n" + "network={";
        for (var o = 0; o < Object.keys(list[i]).length; o++) {
            if (Object.keys(list[i])[o] === 'psk') {
                conf = conf + "\n" + Object.keys(list[i])[o] + '=' + list[i][Object.keys(list[i])[o]];
            }
            else {
                conf = conf + "\n" + Object.keys(list[i])[o] + '="' + list[i][Object.keys(list[i])[o]] + '"';
            }
        }
        conf = conf + "\n" + "}";
    }
    fs.writeFileSync(file, conf, { encoding: "utf-8" });
    child_process.execSync('sync');
}
function fromlinetowpanets(lines) {
    var conf = "";
    var nets = [];
    var net;
    var start = false;
    var firstnet = false;
    var endnetwork = true;
    for (var i = 0; i < lines.length; i++) {
        var checkline = lines[i].replace(/\t/g, "");
        if (checkline[0] !== "#" || (checkline[0] === "#" && checkline[3] === "k" && checkline.split("psk").length === 2)) {
            if (checkline.split("etwork").length === 2 && endnetwork) {
                start = true;
                firstnet = true;
                endnetwork = false;
                net = {};
            }
            else if (checkline.replace(/ /g, "")[0] === "}" && firstnet) {
                endnetwork = true;
                firstnet = false;
                nets.push(net);
            }
            else if (firstnet && checkline.split("=").length === 2) {
                net[checkline.split("=")[0].replace(/ /g, "")] = checkline.split("=")[1].replace(/"/g, "");
            }
            else if (!start && checkline !== "") {
                if (conf !== "") {
                    conf = (conf + "\n" + checkline);
                }
                else {
                    conf = (checkline);
                }
            }
        }
    }
    return { list: nets, conf: conf };
}
var WpaMan = (function () {
    function WpaMan(file) {
        this.conf = "";
        if (!pathExists.sync(file)) {
            throw Error("path exists not founded");
        }
        var wpafilelines = fs.readFileSync(file, "utf-8").split("\n");
        var obj = fromlinetowpanets(wpafilelines);
        this.conf = obj.conf;
        this.listwpa = obj.list;
        this.wpasupplicant_path = file;
    }
    WpaMan.prototype.addwpa = function (essid, password, priority) {
        var exist;
        var nets = [];
        var list = this.listwpa;
        var conf = this.conf;
        var file = this.wpasupplicant_path;
        return new Promise(function (resolve, reject) {
            if (password.length < 8) {
                reject("passphrase must be 8 characters minimum");
            }
            else {
                child_process.exec("wpa_passphrase \"" + essid + "\" \"" + password + "\"", function (err, stdout, stderr) {
                    if (err || stderr) {
                        console.log(err);
                        console.log(stderr);
                        reject("error on wpa_passphrase");
                    }
                    var wpafilelines = stdout.split('\n');
                    var newnets = fromlinetowpanets(wpafilelines).list;
                    for (var i = 0; i < list.length; i++) {
                        exist = false;
                        for (var l = 0; l < newnets.length; l++) {
                            if (list[i].ssid === newnets[l].ssid) {
                                exist = true;
                            }
                        }
                        if (!exist) {
                            nets.push(list[i]);
                        }
                    }
                    for (var l = 0; l < newnets.length; l++) {
                        nets.push(newnets[l]);
                    }
                    list.length = 0;
                    for (var l = 0; l < nets.length; l++) {
                        list.push(nets[l]);
                    }
                    writefile(file, conf, list);
                    resolve(true);
                });
            }
        });
    };
    WpaMan.prototype.removewpa = function (ssid) {
        var list = this.listwpa;
        var conf = this.conf;
        var file = this.wpasupplicant_path;
        return new Promise(function (resolve, reject) {
            var relist = [];
            var exists = false;
            for (var i = 0; i < list.length; i++) {
                if (list[i].ssid !== ssid) {
                    relist.push(list[i]);
                }
                else {
                    exists = true;
                }
            }
            if (exists) {
                list = relist;
                writefile(file, conf, list);
                resolve(true);
            }
            else {
                reject('network not founded');
            }
        });
    };
    return WpaMan;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = WpaMan;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
